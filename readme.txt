1、ES6
   http://es6.ruanyifeng.com/
2、内存泄漏
   一、什么是内存泄漏？
       不再用到的内存，没有及时释放，就叫做内存泄漏（memory leak）。
   二、垃圾回收机制
       a、标记清除（mark and sweep）
       这是JavaScript最常见的垃圾回收方式，当变量进入执行环境的时候，比如函数中声明一个变量，垃圾回收器将其标记为“进入环境”，当变量离开环境的时候（函数执行结束）将其标记为“离开环境”。

       垃圾回收器会在运行的时候给存储在内存中的所有变量加上标记，然后去掉环境中的变量以及被环境中变量所引用的变量（闭包），在这些完成之后仍存在标记的就是要删除的变量了

       b、引用计数(reference counting)
       在低版本IE中经常会出现内存泄露，很多时候就是因为其采用引用计数方式进行垃圾回收。引用计数的策略是跟踪记录每个值被使用的次数，当声明了一个 变量并将一个引用类型赋值给该变量的时候这个值的引用次数就加1，如果该变量的值变成了另外一个，则这个值得引用次数减1，当这个值的引用次数变为0的时 候，说明没有变量在使用，这个值没法被访问了，因此可以将其占用的空间回收，这样垃圾回收器会在运行的时候清理掉引用次数为0的值占用的空间。

       在IE中虽然JavaScript对象通过标记清除的方式进行垃圾回收，但BOM与DOM对象却是通过引用计数回收垃圾的， 也就是说只要涉及BOM及DOM就会出现循环引用问题。
   三、内存泄漏的识别方法
       a、浏览器
          Chrome 浏览器查看内存占用，按照以下步骤操作。
          1、打开开发者工具，选择 Timeline 面板
          2、在顶部的Capture字段里面勾选 Memory
          3、点击左上角的录制按钮。
          4、在页面上进行各种操作，模拟用户的使用情况。
          5、一段时间后，点击对话框的 stop 按钮，面板上就会显示这段时间的内存占用情况。
          如果内存占用基本平稳，接近水平，就说明不存在内存泄漏。
       b、命令行
          命令行可以使用 Node 提供的process.memoryUsage方法。

          console.log(process.memoryUsage());
          // { rss: 27709440,
          //  heapTotal: 5685248,
          //  heapUsed: 3449392,
          //  external: 8772 }
          process.memoryUsage返回一个对象，包含了 Node 进程的内存占用信息。该对象包含四个字段，单位是字节，含义如下。
          rss（resident set size）：所有内存占用，包括指令区和堆栈。
          heapTotal："堆"占用的内存，包括用到的和没用到的。
          heapUsed：用到的堆的部分。
          external： V8 引擎内部的 C++ 对象占用的内存。
          判断内存泄漏，以heapUsed字段为准。
